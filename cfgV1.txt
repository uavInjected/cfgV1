--// Cache

local loadstring, game, getgenv, setclipboard = loadstring, game, getgenv, setclipboard

--// Loaded check

if getgenv().Aimbot then return end

--// Load Aimbot V2 (Raw)

loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Aimbot-V2/main/Resources/Scripts/Raw%20Main.lua"))()

--// Variables

local Aimbot = getgenv().Aimbot
local Settings, FOVSettings, Functions = Aimbot.Settings, Aimbot.FOVSettings, Aimbot.Functions

local Library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)() -- Pepsi's UI Library

local Parts = {"Head", "HumanoidRootPart", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg", "UpperTorso", "LeftUpperLeg", "RightFoot", "RightLowerLeg", "LowerTorso", "RightUpperLeg"}

--// Frame

Library.UnloadCallback = Functions.Exit

local MainFrame = Library:CreateWindow({
	Name = "cfg priv",
	Themeable = {
		Image = "7059346386",
		Info = "Made by cfg",
		Credit = false
	},
	Background = "",
	Theme = [[{"__Designer.Colors.section":"ADC7FF","__Designer.Colors.topGradient":"1B242F","__Designer.Settings.ShowHideKey":"Enum.KeyCode.RightShift","__Designer.Colors.otherElementText":"54637D","__Designer.Colors.hoveredOptionBottom":"38667D","__Designer.Background.ImageAssetID":"","__Designer.Colors.unhoveredOptionTop":"407495","__Designer.Colors.innerBorder":"2C4168","__Designer.Colors.unselectedOption":"4E6EA0","__Designer.Background.UseBackgroundImage":true,"__Designer.Files.WorkspaceFile":"Aimbot V2","__Designer.Colors.main":"23A0FF","__Designer.Colors.outerBorder":"162943","__Designer.Background.ImageColor":"FFFFFF","__Designer.Colors.tabText":"C9DFF1","__Designer.Colors.elementBorder":"111D26","__Designer.Colors.sectionBackground":"0E141C","__Designer.Colors.selectedOption":"558AC2","__Designer.Colors.background":"11182A","__Designer.Colors.bottomGradient":"202B42","__Designer.Background.ImageTransparency":95,"__Designer.Colors.hoveredOptionTop":"4885A0","__Designer.Colors.elementText":"7692B8","__Designer.Colors.unhoveredOptionBottom":"5471C4"}]]
})

--// Tabs

local SettingsTab = MainFrame:CreateTab({
	Name = "Settings"
})

local FOVSettingsTab = MainFrame:CreateTab({
	Name = "FOV Settings"
})

local FunctionsTab = MainFrame:CreateTab({
	Name = "Functions"
})

--// Settings - Sections

local Values = SettingsTab:CreateSection({
	Name = "Values"
})

local Checks = SettingsTab:CreateSection({
	Name = "Checks"
})

local ThirdPerson = SettingsTab:CreateSection({
	Name = "Third Person"
})

--// FOV Settings - Sections

local FOV_Values = FOVSettingsTab:CreateSection({
	Name = "Values"
})

local FOV_Appearance = FOVSettingsTab:CreateSection({
	Name = "Appearance"
})

--// Functions - Sections

local FunctionsSection = FunctionsTab:CreateSection({
	Name = "Functions"
})

--// Settings / Values

Values:AddToggle({
	Name = "Enabled",
	Value = Settings.Enabled,
	Callback = function(New, Old)
		Settings.Enabled = New
	end
}).Default = Settings.Enabled

Values:AddToggle({
	Name = "Toggle",
	Value = Settings.Toggle,
	Callback = function(New, Old)
		Settings.Toggle = New
	end
}).Default = Settings.Toggle

Settings.LockPart = Parts[1]; Values:AddDropdown({
	Name = "Lock Part",
	Value = Parts[1],
	Callback = function(New, Old)
		Settings.LockPart = New
	end,
	List = Parts,
	Nothing = "Head"
}).Default = Parts[1]

Values:AddTextbox({ -- Using a Textbox instead of a Keybind because the UI Library doesn't support Mouse inputs like Left Click / Right Click...
	Name = "Hotkey",
	Value = Settings.TriggerKey,
	Callback = function(New, Old)
		Settings.TriggerKey = New
	end
}).Default = Settings.TriggerKey

--[[
Values:AddKeybind({
	Name = "Hotkey",
	Value = Settings.TriggerKey,
	Callback = function(New, Old)
		Settings.TriggerKey = stringmatch(tostring(New), "Enum%.[UserInputType]*[KeyCode]*%.(.+)")
	end,
}).Default = Settings.TriggerKey
]]

Values:AddSlider({
	Name = "Sensitivity",
	Value = Settings.Sensitivity,
	Callback = function(New, Old)
		Settings.Sensitivity = New
	end,
	Min = 0,
	Max = 1,
	Decimals = 2
}).Default = Settings.Sensitivity

--// Settings / Checks

Checks:AddToggle({
	Name = "Team Check",
	Value = Settings.TeamCheck,
	Callback = function(New, Old)
		Settings.TeamCheck = New
	end
}).Default = Settings.TeamCheck

Checks:AddToggle({
	Name = "Wall Check",
	Value = Settings.WallCheck,
	Callback = function(New, Old)
		Settings.WallCheck = New
	end
}).Default = Settings.WallCheck

Checks:AddToggle({
	Name = "Alive Check",
	Value = Settings.AliveCheck,
	Callback = function(New, Old)
		Settings.AliveCheck = New
	end
}).Default = Settings.AliveCheck

--// Settings / ThirdPerson

ThirdPerson:AddToggle({
	Name = "Enable Third Person",
	Value = Settings.ThirdPerson,
	Callback = function(New, Old)
		Settings.ThirdPerson = New
	end
}).Default = Settings.ThirdPerson

ThirdPerson:AddSlider({
	Name = "Sensitivity",
	Value = Settings.ThirdPersonSensitivity,
	Callback = function(New, Old)
		Settings.ThirdPersonSensitivity = New
	end,
	Min = 0.1,
	Max = 5,
	Decimals = 1
}).Default = Settings.ThirdPersonSensitivity

--// FOV Settings / Values

FOV_Values:AddToggle({
	Name = "Enabled",
	Value = FOVSettings.Enabled,
	Callback = function(New, Old)
		FOVSettings.Enabled = New
	end
}).Default = FOVSettings.Enabled

FOV_Values:AddToggle({
	Name = "Visible",
	Value = FOVSettings.Visible,
	Callback = function(New, Old)
		FOVSettings.Visible = New
	end
}).Default = FOVSettings.Visible

FOV_Values:AddSlider({
	Name = "Amount",
	Value = FOVSettings.Amount,
	Callback = function(New, Old)
		FOVSettings.Amount = New
	end,
	Min = 10,
	Max = 300
}).Default = FOVSettings.Amount

--// FOV Settings / Appearance

FOV_Appearance:AddToggle({
	Name = "Filled",
	Value = FOVSettings.Filled,
	Callback = function(New, Old)
		FOVSettings.Filled = New
	end
}).Default = FOVSettings.Filled

FOV_Appearance:AddSlider({
	Name = "Transparency",
	Value = FOVSettings.Transparency,
	Callback = function(New, Old)
		FOVSettings.Transparency = New
	end,
	Min = 0,
	Max = 1,
	Decimal = 1
}).Default = FOVSettings.Transparency

FOV_Appearance:AddSlider({
	Name = "Sides",
	Value = FOVSettings.Sides,
	Callback = function(New, Old)
		FOVSettings.Sides = New
	end,
	Min = 3,
	Max = 60
}).Default = FOVSettings.Sides

FOV_Appearance:AddSlider({
	Name = "Thickness",
	Value = FOVSettings.Thickness,
	Callback = function(New, Old)
		FOVSettings.Thickness = New
	end,
	Min = 1,
	Max = 50
}).Default = FOVSettings.Thickness

FOV_Appearance:AddColorpicker({
	Name = "Color",
	Value = FOVSettings.Color,
	Callback = function(New, Old)
		FOVSettings.Color = New
	end
}).Default = FOVSettings.Color

FOV_Appearance:AddColorpicker({
	Name = "Locked Color",
	Value = FOVSettings.LockedColor,
	Callback = function(New, Old)
		FOVSettings.LockedColor = New
	end
}).Default = FOVSettings.LockedColor

--// Functions / Functions

FunctionsSection:AddButton({
	Name = "Reset Settings",
	Callback = function()
		Functions.ResetSettings()
		Library.ResetAll()
	end
})

FunctionsSection:AddButton({
	Name = "Restart",
	Callback = Functions.Restart
})

FunctionsSection:AddButton({
	Name = "Exit",
	Callback = function()
		Functions:Exit()
		Library.Unload()
	end
})

FunctionsSection:AddButton({
	Name = "Copy Script Page",
	Callback = function()
		setclipboard("https://github.com/Exunys/Aimbot-V2")
	end
})
--// ESP Tab
local ESPTab = MainFrame:CreateTab({
    Name = "ESP"
})

--// Name ESP Section
local NameESPEnabled = false
local NameFontSize = 14  -- Default font size for name tags

-- Function to create Name ESP
local function createNameESP(player)
    local character = player.Character
    if character and character:FindFirstChild("Head") then
        -- Remove existing ESP if it already exists
        for _, v in pairs(character.Head:GetChildren()) do
            if v:IsA("BillboardGui") then
                v:Destroy()
            end
        end
        
        local nameTag = Instance.new("BillboardGui")
        nameTag.Adornee = character.Head
        nameTag.Parent = character.Head
        nameTag.Size = UDim2.new(0, 200, 0, 50)
        nameTag.StudsOffset = Vector3.new(0, 2, 0)  -- Position above the head
        nameTag.AlwaysOnTop = true
        nameTag.Enabled = NameESPEnabled

        local label = Instance.new("TextLabel")
        label.Parent = nameTag
        label.Size = UDim2.new(1, 0, 1, 0)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextStrokeTransparency = 0.8
        label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
        label.Text = player.Name
        label.TextSize = NameFontSize  -- Use the adjusted font size
    end
end

-- Function to update Name ESP for all players
local function updateNameESP()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            createNameESP(player)
        end
    end
end

-- Function to reset ESP for a player when they respawn
local function onPlayerRespawn(player)
    player.CharacterAdded:Connect(function()
        wait(1)  -- Wait for character to fully load
        createNameESP(player)  -- Recreate the ESP when the player respawns
    end)
end

-- Hook into player respawns
game.Players.PlayerAdded:Connect(function(player)
    onPlayerRespawn(player)
end)

-- Adding Name ESP to ESP Tab
local NameESPSection = ESPTab:CreateSection({
    Name = "Name ESP"
})

NameESPSection:AddToggle({
    Name = "Enable Name ESP",
    Value = NameESPEnabled,
    Callback = function(New, Old)
        NameESPEnabled = New
        updateNameESP()  -- Update the ESP display when toggled
    end
}).Default = NameESPEnabled

NameESPSection:AddSlider({
    Name = "Font Size",
    Value = NameFontSize,
    Min = 8,
    Max = 50,
    Callback = function(New, Old)
        NameFontSize = New
        updateNameESP()  -- Reapply ESP with the new font size
    end
}).Default = NameFontSize
--// Re-enable ESP after respawn

-- Function to reset ESP for a player when they respawn
local function onPlayerRespawn(player)
    player.CharacterAdded:Connect(function()
        wait(1)  -- Wait for character to fully load
        createNameESP(player)  -- Recreate the ESP when the player respawns
    end)
end

-- Hook into player respawns
game.Players.PlayerAdded:Connect(function(player)
    onPlayerRespawn(player)
end)

-- Function to ensure that ESP works for all players, including those who are already in the game
for _, player in pairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        onPlayerRespawn(player)  -- Ensure ESP is recreated on respawn
    end
end
--// Health Bar and Tracers Features

-- Health Bar Options
local HealthBarEnabled = false
local HealthBarOrientation = "Vertical" -- Options: "Vertical", "Horizontal"
local HealthBarSize = UDim2.new(0.2, 0, 2, 0) -- Default size

-- Tracers Options
local TracersEnabled = false
local tracers = {} -- Table to keep track of tracers

-- Function to create or update a Health Bar
local function createHealthBar(player)
    local character = player.Character
    if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("Head") then
        -- Remove existing Health Bar if it already exists
        for _, v in pairs(character.Head:GetChildren()) do
            if v:IsA("BillboardGui") then
                v:Destroy()
            end
        end

        local healthBar = Instance.new("BillboardGui")
        healthBar.Adornee = character.Head
        healthBar.Parent = character.Head
        healthBar.Size = HealthBarSize
        healthBar.StudsOffset = Vector3.new(0, 3, 0) -- Default offset above head
        healthBar.AlwaysOnTop = true
        healthBar.Enabled = HealthBarEnabled

        local barBackground = Instance.new("Frame")
        barBackground.Parent = healthBar
        barBackground.Size = UDim2.new(1, 0, 1, 0)
        barBackground.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        barBackground.BorderSizePixel = 0

        local bar = Instance.new("Frame")
        bar.Parent = barBackground
        bar.Size = UDim2.new(1, 0, character.Humanoid.Health / character.Humanoid.MaxHealth, 0)
        bar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        bar.BorderSizePixel = 0
        bar.AnchorPoint = Vector2.new(0, 1)

        if HealthBarOrientation == "Vertical" then
            healthBar.StudsOffset = Vector3.new(-2, 0, 0) -- Position next to character
            bar.AnchorPoint = Vector2.new(0, 1)
            bar.Position = UDim2.new(0, 0, 1, 0)
            bar.Size = UDim2.new(1, 0, character.Humanoid.Health / character.Humanoid.MaxHealth, 0)
        else -- Horizontal
            healthBar.StudsOffset = Vector3.new(0, 3, 0) -- Default offset above head
            bar.AnchorPoint = Vector2.new(0, 0)
            bar.Position = UDim2.new(0, 0, 0, 0)
            bar.Size = UDim2.new(character.Humanoid.Health / character.Humanoid.MaxHealth, 0, 1, 0)
        end

        character.Humanoid.HealthChanged:Connect(function()
            if HealthBarOrientation == "Vertical" then
                bar.Size = UDim2.new(1, 0, character.Humanoid.Health / character.Humanoid.MaxHealth, 0)
            else
                bar.Size = UDim2.new(character.Humanoid.Health / character.Humanoid.MaxHealth, 0, 1, 0)
            end
        end)
    end
end

-- Function to create Tracers
local function createTracers()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local tracer = Instance.new("Beam")
                tracer.Attachment0 = Instance.new("Attachment", character.HumanoidRootPart)
                tracer.Attachment1 = Instance.new("Attachment", game.Players.LocalPlayer.Character.HumanoidRootPart)
                tracer.Color = ColorSequence.new(Color3.fromRGB(255, 0, 0)) -- Tracer color
                tracer.Width0 = 0.05
                tracer.Width1 = 0.05
                tracer.Parent = character.HumanoidRootPart
                table.insert(tracers, tracer) -- Add to tracers table
                tracer.Enabled = TracersEnabled
            end
        end
    end
end

-- Function to disable Tracers
local function disableTracers()
    for _, tracer in pairs(tracers) do
        if tracer then
            tracer:Destroy() -- Remove all tracers
        end
    end
    tracers = {} -- Reset the tracers table
end

-- UI Integration for ESP Tab
local HealthBarSection = ESPTab:CreateSection({
    Name = "Health Bar"
})

HealthBarSection:AddToggle({
    Name = "Enable Health Bar",
    Value = HealthBarEnabled,
    Callback = function(New)
        HealthBarEnabled = New
        for _, player in pairs(game.Players:GetPlayers()) do
            createHealthBar(player)
        end
    end
}).Default = HealthBarEnabled

HealthBarSection:AddDropdown({
    Name = "Orientation",
    List = {"Vertical", "Horizontal"},
    Value = HealthBarOrientation,
    Callback = function(New)
        HealthBarOrientation = New
        for _, player in pairs(game.Players:GetPlayers()) do
            createHealthBar(player)
        end
    end
}).Default = HealthBarOrientation

HealthBarSection:AddSlider({
    Name = "Health Bar Size",
    Min = 0.1,
    Max = 3,
    Value = 2,
    Callback = function(NewSize)
        HealthBarSize = UDim2.new(0.2, 0, NewSize, 0)
        for _, player in pairs(game.Players:GetPlayers()) do
            createHealthBar(player)
        end
    end
})

local TracersSection = ESPTab:CreateSection({
    Name = "Tracers"
})

TracersSection:AddToggle({
    Name = "Enable Tracers",
    Value = TracersEnabled,
    Callback = function(New)
        TracersEnabled = New
        if TracersEnabled then
            createTracers()
        else
            disableTracers() -- Disable tracers when toggle is off
        end
    end
}).Default = TracersEnabled

-- Ensure health bars and tracers persist after respawn
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    -- Recreate health bar and tracers when the character respawns
    if HealthBarEnabled then
        createHealthBar(game.Players.LocalPlayer)
    end
    if TracersEnabled then
        createTracers()
    end
end)

-- Create initial health bars and tracers for all players
for _, player in pairs(game.Players:GetPlayers()) do
    createHealthBar(player)
end
--// Misc Tab
local MiscTab = MainFrame:CreateTab({
    Name = "Misc"
})

--// Misc Section
local MiscSection = MiscTab:CreateSection({
    Name = "Miscellaneous"
})

--// Teleport to Tacos
MiscSection:AddButton({
    Name = "Teleport to Tacos",
    Callback = function()
        local tacoPosition = Vector3.new(590, 51, -477.9)
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(tacoPosition)
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

--// Teleport to Med Armor
MiscSection:AddButton({
    Name = "Teleport to Med Armor",
    Callback = function()
        local medArmorPosition = Vector3.new(538.4, 50.3, -638.2)
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(medArmorPosition)
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

--// Teleport to Food Shop
MiscSection:AddButton({
    Name = "Teleport to Food Shop",
    Callback = function()
        local foodShopPosition = Vector3.new(-327.4, 23, -296.63)
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(foodShopPosition)
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

--// Teleport to Rev
MiscSection:AddButton({
    Name = "Teleport to Rev",
    Callback = function()
        local revPosition = Vector3.new(-636.04, 21.74, -128.694)
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(revPosition)
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

--// Teleport to SG
MiscSection:AddButton({
    Name = "Teleport to SG",
    Callback = function()
        local sgPosition = Vector3.new(28.32, 25.63, -833.7)
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(sgPosition)
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

--// Teleport to High Armor
MiscSection:AddButton({
    Name = "Teleport to High Armor",
    Callback = function()
        local highArmorPosition = Vector3.new(-934.7266, -28.5097, 565.0764)  -- Coordinates for High Armor
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(highArmorPosition)
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

--// Teleport to Tac
MiscSection:AddButton({
    Name = "Teleport to Tac",
    Callback = function()
        local tacPosition = Vector3.new(476.98, 48.06, -622.65)  -- Coordinates for Tac
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(tacPosition)
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

--// Teleport to Med Kit
MiscSection:AddButton({
    Name = "Teleport to Med Kit",
    Callback = function()
        local medKitPosition = Vector3.new(-194.7, 22.1, -667.8)  -- Coordinates for Med Kit
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(medKitPosition)
        else
            warn("Character or HumanoidRootPart not found.")
        end
    end
})

--// Rage Mode Toggle (Aimbot Lock & Spin)
local TargetModeToggle = MiscSection:AddToggle({
    Name = "Rage f(strt)I(stop))",
    Default = false,
    Callback = function(state)
        _G.RageModeEnabled = state
        if not _G.RageModeEnabled then
            Spinning = false  -- Stop spinning and locking
            TargetPlayer = nil  -- Clear the target player
        end
    end
})

--// Select Random Toggle (Checkbox to select random player)
local SelectRandomCheckbox = MiscSection:AddToggle({
    Name = "Random rage)",
    Default = true,
    Callback = function(state)
        _G.SelectRandomTarget = state
    end
})

--// Rage Mode Name Input
local RageTextbox = MiscSection:AddTextbox({
    Name = "Rage Target",
    Default = "",
    ClearTextAfterFocusLost = false,
    Callback = function(playerName)
        _G.RageTargetName = playerName
    end
})

--// Teleport to Player (Textbox for player name)
local TeleportToPlayerTextbox = MiscSection:AddTextbox({
    Name = "Teleport to Player",
    Default = "",
    ClearTextAfterFocusLost = false,
    Callback = function(playerName)
        local targetPlayer = game.Players:FindFirstChild(playerName)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
        else
            warn("Player not found or player has no HumanoidRootPart.")
        end
    end
})

--// Hitbox Expander (added from second script)
local WorldTab = MainFrame:CreateTab({ Name = "World" })
local WorldSettings = WorldTab:CreateSection({ Name = "Hitbox Expander" })

local hitboxSize = 10  -- Default hitbox size
local hitboxVisible = true  -- Default visibility is true

WorldSettings:CreateSlider({
    Name = "Hitbox Size",
    Min = 5,
    Max = 100,
    Default = hitboxSize,
    Callback = function(value)
        hitboxSize = value  -- Update hitbox size based on the slider value
    end
})

WorldSettings:CreateToggle({
    Name = "Toggle Hitbox Visibility",
    Default = true,
    Callback = function(value)
        hitboxVisible = value  -- Toggle hitbox visibility
    end
})

WorldSettings:CreateButton({
    Name = "Expand All Player Hitboxes",
    Callback = function()
        local function expandAllPlayerHitboxes()
            local localPlayer = game.Players.LocalPlayer
            for _, player in ipairs(game.Players:GetPlayers()) do
                pcall(function()
                    if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local hitbox = player.Character:FindFirstChild("HumanoidRootPart")
                        if hitbox then
                            hitbox.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)  -- Use selected hitbox size
                            hitbox.CanCollide = false
                            hitbox.Transparency = hitboxVisible and 0.5 or 1  -- Set transparency based on visibility
                            hitbox.Color = Color3.fromRGB(255, 0, 0)
                        end
                    end
                end)
            end
        end
        -- Run the function indefinitely to keep updating hitboxes
        while true do
            expandAllPlayerHitboxes()
            wait(1)
        end
    end
})

--// Rage Mode Script: Aimbot Lock & Spin (same as original)
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Holding = false
local TargetPlayer = nil
local Spinning = false  -- Flag to control spinning

_G.AimbotEnabled = true
_G.TeamCheck = false
_G.AimPart = "Head"
_G.Sensitivity = 0.2

-- Function to get a random player
local function GetRandomPlayer()
    local players = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            table.insert(players, player)
        end
    end
    if #players > 0 then
        return players[math.random(1, #players)]
    end
end

-- Lock onto the target player's head using the aimbot logic
local function LockOnToTarget()
    if TargetPlayer and TargetPlayer.Character then
        local aimPart = TargetPlayer.Character:FindFirstChild(_G.AimPart)
        if aimPart then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, aimPart.Position)
        end
    end
end

-- Spin your character around the target player's position
local function SpinAroundTarget()
    if TargetPlayer and TargetPlayer.Character then
        local targetPosition = TargetPlayer.Character.HumanoidRootPart.Position
        local characterHRP = LocalPlayer.Character.HumanoidRootPart
        local radius = 10  -- Set radius for the spinning path
        local angle = tick() * 1000  -- 100 times faster spin

        -- Calculate the offset position for the spinning motion
        local xOffset = math.cos(angle) * radius
        local zOffset = math.sin(angle) * radius

        -- Update the character's HumanoidRootPart CFrame to move in a circular path around the target
        characterHRP.CFrame = CFrame.new(targetPosition + Vector3.new(xOffset, 0, zOffset), targetPosition)

        -- Continuously lock on to the target's head during the spin
        LockOnToTarget()
    end
end

-- Detect F key press for teleportation and locking on
UserInputService.InputBegan:Connect(function(Input)
    if Input.UserInputType == Enum.UserInputType.Keyboard then
        if Input.KeyCode == Enum.KeyCode.F and _G.RageModeEnabled then
            if _G.SelectRandomTarget then
                TargetPlayer = GetRandomPlayer()
            else
                local playerName = _G.RageTargetName
                TargetPlayer = game:GetService("Players"):FindFirstChild(playerName)
            end

            if TargetPlayer then
                local targetHRP = TargetPlayer.Character.HumanoidRootPart
                LocalPlayer.Character:SetPrimaryPartCFrame(targetHRP.CFrame)

                Spinning = true
                while Spinning and TargetPlayer and TargetPlayer.Character do
                    SpinAroundTarget()
                    wait(0.05)
                end
            end
        elseif Input.KeyCode == Enum.KeyCode.I then
            Spinning = false
            TargetPlayer = nil
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if TargetPlayer and TargetPlayer.Character then
        LockOnToTarget()
    end
end)
